// Ajout d'un écouteur d'événement sur le bouton "Ajouter une recette"
// Lorsque ce bouton est cliqué, la fonction `ajouterRecette` est appelée
document
  .getElementById("ajouterRecetteBtn").addEventListener("click", ajouterRecette);

// Ajout d'un écouteur d'événement sur le bouton "Modifier une recette"
// Lorsque ce bouton est cliqué, la fonction `modifierRecette` est appelée
document
  .getElementById("modifierRecetteBtn").addEventListener("click", modifierRecette);
  // Ajout d'un écouteur d'événement sur le bouton "Supprimer une recette"
// Lorsque ce bouton est cliqué, la fonction `supprimerRecette` est appelée
document
  .getElementById("supprimerRecetteBtn").addEventListener("click", supprimerRecette);

// Initialisation de la base de données IndexedDB
let db;
const request = indexedDB.open("recettesDB", 1);
request.onupgradeneeded = function (event) {
  db = event.target.result;
  // Création d'un ObjectStore pour les recettes avec un index sur le nom
  const objectStore = db.createObjectStore("recettes", { keyPath: "id" });
  objectStore.createIndex("nom", "nom", { unique: false });
};

request.onsuccess = function (event) {
  db = event.target.result;
  afficherRecettes(); // Affichage des recettes au chargement de la page
};

// Fonction pour ajouter une nouvelle recette
function ajouterRecette() {
  // Récupération des valeurs des champs du formulaire
  const nom = document.getElementById("nomRecette").value;
  const ingredients = document.getElementById("ingredientsRecette").value;
  const temps = document.getElementById("tempsRecette").value;

  // Vérification que tous les champs sont remplis
  if (nom && ingredients && temps) {
    // Ajout de la recette dans la base de données IndexedDB
    ajouterRecetteDansIndexedDB(nom, ingredients, temps);

    // Affichage d'un message de confirmation via un popup
    showPopup("Recette ajoutée avec succès!");

    // Réinitialisation du formulaire
    resetForm();
  }
}

// Fonction pour afficher toutes les recettes stockées dans IndexedDB
function afficherRecettes() {
  const listeRecettes = document.getElementById("listeRecettes");
  listeRecettes.innerHTML = ""; // Réinitialisation de la liste des recettes

  // Création d'une transaction en mode lecture seule sur l'ObjectStore "recettes"
  let transaction = db.transaction(["recettes"], "readonly");
  let objectStore = transaction.objectStore("recettes");

  // Parcours des recettes via un curseur
  objectStore.openCursor().onsuccess = function (event) {
    let cursor = event.target.result;
    if (cursor) {
      // Création d'un élément HTML pour afficher la recette
      const recetteDiv = document.createElement("div");
      recetteDiv.className = "recette list-group-item";
      recetteDiv.innerHTML = `<h2>${cursor.value.nom}</h2>
                                    <div class="details hidden">
                                        <p>Ingrédients: ${cursor.value.ingredients}</p>
                                        <p>Temps: ${cursor.value.temps}</p>
                                    </div>
                                    <button class="btn btn-warning" onclick="editRecette(${cursor.value.id})">Modifier</button>
                                    <button class="btn btn-danger" onclick="deleteRecette(${cursor.value.id})">Supprimer</button>`;

      // Ajout d'un événement pour afficher/masquer les détails de la recette
      recetteDiv.querySelector("h2").addEventListener("click", toggleDetails);

      // Ajout de la recette à la liste
      listeRecettes.appendChild(recetteDiv);
      cursor.continue(); // Passage à la recette suivante
    }
  };
}

// Fonction pour charger les données d'une recette dans le formulaire pour modification
function editRecette(id) {
  let transaction = db.transaction(["recettes"], "readonly");
  let objectStore = transaction.objectStore("recettes");
  let request = objectStore.get(id);

  request.onsuccess = function (event) {
    let recette = event.target.result;
    // Remplissage des champs du formulaire avec les données de la recette
    document.getElementById("recetteId").value = recette.id;
    document.getElementById("nomRecette").value = recette.nom;
    document.getElementById("ingredientsRecette").value = recette.ingredients;
    document.getElementById("tempsRecette").value = recette.temps;

    // Affichage du bouton "Modifier" et masquage du bouton "Ajouter"
    document.getElementById("ajouterRecetteBtn").classList.add("d-none");
    document.getElementById("modifierRecetteBtn").classList.remove("d-none");
  };
}

// Fonction pour modifier une recette existante
function modifierRecette() {
  // Récupération des données du formulaire
  const id = parseInt(document.getElementById("recetteId").value);
  const nom = document.getElementById("nomRecette").value;
  const ingredients = document.getElementById("ingredientsRecette").value;
  const temps = document.getElementById("tempsRecette").value;

  // Mise à jour de la recette dans IndexedDB
  let transaction = db.transaction(["recettes"], "readwrite");
  let objectStore = transaction.objectStore("recettes");
  let request = objectStore.put({
    id: id,
    nom: nom,
    ingredients: ingredients,
    temps: temps,
  });

  request.onsuccess = function (event) {
    afficherRecettes(); // Mise à jour de l'affichage des recettes
    resetForm(); // Réinitialisation du formulaire
  };
}

// Fonction pour supprimer une recette
function deleteRecette(id) {
  let transaction = db.transaction(["recettes"], "readwrite");
  let objectStore = transaction.objectStore("recettes");
  let request = objectStore.delete(id);

  request.onsuccess = function (event) {
    afficherRecettes(); // Mise à jour de l'affichage après suppression
  };
}

// Fonction pour réinitialiser le formulaire
function resetForm() {
  document.getElementById("recetteId").value = "";
  document.getElementById("nomRecette").value = "";
  document.getElementById("ingredientsRecette").value = "";
  document.getElementById("tempsRecette").value = "";
  document.getElementById("ajouterRecetteBtn").classList.remove("d-none");
  document.getElementById("modifierRecetteBtn").classList.add("d-none");
}

// Fonction pour afficher un popup temporaire avec un message
function showPopup(message) {
  const popup = document.createElement("div");
  popup.className = "popup";
  popup.innerText = message;
  document.body.appendChild(popup);

  // Animation pour afficher et masquer le popup
  setTimeout(() => {
    popup.classList.add("show");
  }, 10);

  setTimeout(() => {
    popup.classList.remove("show");
    setTimeout(() => {
      document.body.removeChild(popup);
    }, 300);
  }, 3000);
}

// Fonction pour afficher ou masquer les détails d'une recette
function toggleDetails(event) {
  const details = event.target.nextElementSibling;
  details.classList.toggle("hidden");
}

// Exemple de récupération de recettes depuis une API REST
function fetchRecettesFromAPI(params) {
  axios
    .get(`https://www.themealdb.com/api/json/v1/1/search.php?s=${params}`)
    .then((response) => {
      console.log("Recettes récupérées depuis l'API", response.data);
      response.data.forEach((recette) => {
        ajouterRecetteDansIndexedDB(
          recette.nom,
          recette.ingredients,
          recette.temps
        );
      });
      afficherRecettes(); // Mise à jour de l'affichage après récupération
    })
    .catch((error) => {
      console.error(
        "Erreur lors de la récupération des recettes depuis l'API",
        error
      );
    });
}

// Appel de la fonction pour récupérer des recettes depuis l'API au chargement de la page
window.onload = function () {
  fetchRecettesFromAPI();
};
// Appel de la fonction pour afficher les recettes au chargement de la page
window.onload = function () {
  afficherRecettes();
};
